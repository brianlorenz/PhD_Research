import numpy as np
from compute_av import compute_balmer_av, compute_ratio_from_av

def plot_comparison(ax, mass_data, dec_data, dec_err_low, dec_err_high, law, color, marker,size, mec='black'):
    balmer_avs = compute_balmer_av(dec_data, law=law)
    avs_low = compute_balmer_av(dec_err_low, law=law)
    avs_high = compute_balmer_av(dec_err_high, law=law)
    err_avs_low = balmer_avs - avs_low
    err_avs_high = avs_high - balmer_avs
    err_plot = np.vstack([err_avs_low, err_avs_high])
    legend_line = ax.errorbar(mass_data, balmer_avs, yerr=err_plot, color=color, marker=marker, ms=size, mec=mec, ls='None', zorder=51)
    # Set alpha for error bar lines
    for bar in legend_line[2]:  # container[2] is 'barlinecols'
        bar.set_alpha(0.3)
    # legend_line, = ax.plot(mass_data, balmer_avs, color=color, marker=marker, ms=size, mec='black', ls='None', zorder=51)
    return legend_line

runco_data_mass = np.array([9.04029773256327, 9.341541353064535	, 9.507356359477967, 9.660911296972452, 9.76852663271054, 9.882224549023732, 10.039519064690833, 10.177858006949581, 10.35957669226384, 10.679835800016289]) #Runco 2022
runco_data_decs = np.array([3.282805987024606, 3.6142358130258136, 2.633209874253258, 4.096971898622865, 4.597955149928179, 4.213816474455239, 4.5059129818220125, 4.514513937180409, 5.778564129951793, 5.644147137838686])
runco_data_low_errs = np.array([2.962921920806605, 3.053157621250517, 1.9613649015451446, 3.7494260133721076, 4.112736346815765, 3.8669186464173313, 3.9777224466627423, 3.8110691285223055, 3.8112955060523146, 3.917794006553832])
runco_data_high_errs = np.array([3.6762577301441723, 4.233338302185368, 3.0869786600437763, 5.084665364658997, 5.592665974396095, 5.002947792524321, 5.071352588898238, 5.101330094315549, 5.917607716711428, 7.1278361407347335])


matharu_highz_masses = np.array([8.751604697779197, 9.327028262447644, 10.353830428722194])
matharu_highz_decs = np.array([2.636052772813862, 3.6591128647003663, 5.219943735734885])
matharu_highz_lows = np.array([2.345958586198152, 2.969039320110641, 3.9340537400402225])
matharu_highz_highs = np.array([2.9342433517932025, 4.350328208213167, 6.510318948790083])


matharu_lowz_masses = np.array([8.41098432350639, 9.406766569120505, 10.029238571933288 ])
matharu_lowz_decs = np.array([2.771977565066615, 3.1374576101252085, 3.3600352683758263])
matharu_lowz_lows = np.array([2.14403121074329, 2.820720465684106, 2.7671066367062402])
matharu_lowz_highs = np.array([3.398760298896536, 3.451797920463325, 3.9558260643913257])

matharu_median_mass = np.median([matharu_highz_masses, matharu_lowz_masses], axis=0)
matharu_median_decs = np.median([matharu_highz_decs, matharu_lowz_decs], axis=0)
matharu_median_lows = np.median([matharu_highz_lows, matharu_lowz_lows], axis=0)
matharu_median_highs = np.median([matharu_highz_highs, matharu_lowz_highs], axis=0)


dominguez_masses = np.array([8.497549863607555, 9.406970962503282, 10.338201660610277])
dominguez_decs = np.array([3.483108496404731, 3.500295030372533, 4.455848629978076])
dominguez_lows = np.array([2.6298293865632787, 2.7132407323931385, 2.5933349199316194])
dominguez_highs = np.array([4.3359863991211895, 4.27405565712728, 6.315626312521978])

battisti_masses = np.array([8.601059040530115, 9.140327745470472, 9.500511328190127, 9.94008632056105])
battisti_decs = np.array([3.6015559766216736, 3.603964657814208, 4.240254102283252, 4.700528739204072])
battisti_lows = np.array([3.321400151162317, 3.3615791900080114, 3.953331603942548, 4.110055583123347])
battisti_highs = np.array([3.8796652818749635, 3.8382740452572106, 4.528116355393583, 5.288244209307123])


maheson_all_masses = [8.817918949619884, 9.029839692916767, 8.69997326946661, 8.82948516634496, 8.973781689898052, 9.200110951862206, 9.12632617250552, 9.180420802175695, 9.274917043558233, 9.246553126823173, 9.347588274564218, 9.349177778643423, 9.310920430321291, 8.867474313837954, 8.96776664826424, 9.481676599947793, 9.76724466407958, 9.749693852559393, 9.513992784994723, 9.610235689873873, 9.708355552809369, 9.773122247191615, 9.709031203979938, 9.617501290632537, 9.810408878656363, 9.556285906561339, 11.386790594255128, 11.439382135138292, 10.97042335881465, 11.175385208478012, 11.314842923415902, 10.529627012793494, 10.155500736320974, 9.953981170421255, 9.915939188708164, 9.864489852023887, 9.944223406365449, 10.039740512339701, 10.838633322005318, 10.780092110642022, 10.726674923132926, 10.784294669877912, 10.708314136153785, 10.571686186224508, 10.426755652030245, 10.24360448481934, 10.26687885426755, 10.347901921777593, 10.331910167497911, 10.636923015616095, 10.513559589164686, 10.320863338021251, 10.340697662443958, 10.198128996987107, 10.050413920294654, 10.047234016640989, 10.152590824486959, 10.248497470897524, 10.470751333952121, 10.450675225810322, 10.483150809012802, 10.29, 10.226, 10.216, 10.26, 10.35, 10.422291832053446]
maheson_all_decs = [5.055293279527019, 5.244849769579152, 2.1772101120855485, 1.4268298262266992, 1.8363599031649307, 1.0220394763925684, 2.65851242340702, 2.7954986852434995, 2.8702845168886304, 3.182018677274918, 3.027710003056547, 2.5629913042474457, 2.499925772002999, 2.8416370087127287, 3.0466512563290085, 1.7312588312854922, 1.9589993234175367, 1.7992243450175018, 2.4349575584769347, 2.9390105598980893, 2.62869288529105, 3.3194069331580494, 3.48143090527854, 3.6960047342947524, 3.0032983713384356, 4.855029284196805, 5.037796692359711, 4.8535340293138205, 5.152623032374526, 7.456854265868983, 8.751811540845049, 7.306288482166056, 6.475273079665697, 5.801264872230657, 5.0840423047805805, 3.725318724154419, 4.008294013149178, 3.2245169853943576, 4.822735309753135, 4.656012353168407, 6.424145140901206, 6.19736481698194, 5.205841068564006, 5.844620473397221, 5.61273509670308, 5.3550514804474805, 5.441512794589446, 5.24431977573893, 5.053602120450692, 4.764978543482879, 2.792230786004462, 2.647616143897572, 2.8413066538078366, 4.863149292321566, 4.685753122180641, 4.6157749220393836, 4.0432090974240555, 4.153942160220601, 4.508168177808351, 4.408788730653718, 4.710432297233855, 3.72, 3.60, 3.455, 3.495, 3.50, 3.298677077995588]
# plot_comparison(0, runco_data_mass, runco_data_decs, runco_data_low_errs, runco_data_high_errs, law='cardelli')